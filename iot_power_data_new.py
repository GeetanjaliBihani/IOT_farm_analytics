# -*- coding: utf-8 -*-
"""IOT_power_data_new.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-xxxAkz1tMxeJu5CGLV2IM-AgzfZ6XeN
"""

# !pip install pandas bokeh pyproj
# import pandas as pd
# import pandas as pd
# from bokeh.plotting import figure, output_file, show, output_notebook
# from bokeh.models import ColumnDataSource, LabelSet, HoverTool
# !pip install mysql.connector
# !pip install pandas bokeh pyproj
# import mysql.connector
# import pandas as pd
# import pandas as pd
# from bokeh.plotting import figure, output_file, show, output_notebook
# from bokeh.models import ColumnDataSource, LabelSet, HoverTool

#connecting to the web server
con=mysql.connector.connect(host='cnit5.tech.purdue.edu',user='powerTeam', password='CNIT581POWER', port='3306', database='project')
cursor=con.cursor(buffered=True)
cursor.execute("select database ();")
record=cursor.fetchone()
print("You're connected to database: ", record)

command3='select * from testPower_mock;'
cursor.execute(command3)
power=[]
for row in cursor:
  power.append(row)
cursor.close()
con.close()

#power list to df and data clean
power=pd.DataFrame(power)
power.columns=['UID','Date','b_volt','b_curr','p_volt','p_power','y_total','y_today','max_today','y_ystrday','max_ystrday']
power=power.drop(['UID'], axis=1)
power["b_volt_V"]=power["b_volt"]/1000
power["p_volt_V"]=power["p_volt"]/1000

#getting real time yield
a=[0]
for i in range(1, len(power)):
  a.append(power.iloc[i][6]-power.iloc[i-1][6])

a=pd.DataFrame(a)
#combining all data
power["y_rt"]=a

#Interactive visualizations
from bokeh.plotting import figure, output_file, show, output_notebook
from bokeh.models import ColumnDataSource, LabelSet, HoverTool
from datetime import timedelta
output_notebook()
source = ColumnDataSource(power)
tooltips = [
    ("Battery Voltage(V)", "@b_volt_V"),
]
p = figure(x_axis_type='datetime', tooltips=tooltips)
p.title.text = "PV Battery Voltage (V)"
p.title.align = "center"

p.x_range.start = max(power["Date"])-timedelta(hours=23)
p.x_range.end   = max(power["Date"]) 

p.line(x='Date', y='b_volt_V', source=source, line_color="orange", line_width = 3)

output_file("Battery_Voltage_line_chart.html", title="Battery Voltage Line Chart")
show(p)

#Interactive visualizations
from bokeh.plotting import figure, output_file, show, output_notebook
from bokeh.models import ColumnDataSource, LabelSet, HoverTool
from datetime import timedelta
output_notebook()
source = ColumnDataSource(power)
tooltips = [
    ("Energy Yield (kWh)", "@y_rt"),
]
p = figure(x_axis_type='datetime', tooltips=tooltips)
p.title.text = "PV Energy Yield (kWh)"
p.title.align = "center"

p.x_range.start = max(power["Date"])-timedelta(hours=23)
p.x_range.end   = max(power["Date"]) 

p.line(x='Date', y='y_rt', source=source, line_color="purple", line_width = 3)

output_file("PVEnergy Yield_line_chart.html", title="PV Energy Yield Line Chart")
show(p)

#Interactive visualizations
from bokeh.plotting import figure, output_file, show, output_notebook
from bokeh.models import ColumnDataSource, LabelSet, HoverTool
from datetime import timedelta
output_notebook()
source = ColumnDataSource(power)
tooltips = [
    ("Panel Voltage (V)", "@p_volt_V"),
]
p = figure(x_axis_type='datetime', tooltips=tooltips)
p.title.text = "PV Panel Voltage (V)"
p.title.align = "center"

p.x_range.start = max(power["Date"])-timedelta(hours=23)
p.x_range.end   = max(power["Date"]) 

p.line(x='Date', y='p_volt_V', source=source, line_color="blue", line_width = 3)

output_file("PV_Panel_Voltage_line_chart.html", title="PV Panel Voltage Line Chart")
show(p)

#average monthly yield plot
#connecting to the web server
con=mysql.connector.connect(host='cnit5.tech.purdue.edu',user='powerTeam', password='CNIT581POWER', port='3306', database='project')
cursor=con.cursor(buffered=True)
cursor.execute("select database ();")
record=cursor.fetchone()
print("You're connected to database: ", record)

command3='select * from Monthly_yield;'
cursor.execute(command3)
monthly=[]
for row in cursor:
  monthly.append(row)
cursor.close()
con.close()

monthly=pd.DataFrame(monthly)
monthly.columns=['Month','Avg_IRR','Avg_Yield']
monthly.head()
months=monthly["Month"]
yields=monthly["Avg_Yield"]

# Interactive visualizations (monthly)
import math 
from bokeh.transform import linear_cmap 
from bokeh.palettes import Spectral6
from bokeh.plotting import figure, output_file, show, output_notebook 
from bokeh.models import ColumnDataSource, LabelSet, HoverTool 
from datetime import timedelta 
output_notebook() 
tooltips = [ ("Avg. monthly yield (kWh)", "@Avg_Yield")] 

p = figure(x_range=months)
p.title.text = "Avg. monthly yield (kWh)" 
p.title.align = "center" 

p.xaxis.major_label_orientation = math.pi/2 
p.xaxis.axis_label = 'Avg. monthly yield (kWh)'

p.vbar(x=months, top=yields, color='green' , width=0.7)

output_file("Avg_monthly_yield.html", title="Avg. monthly yield (kWh) Chart") 
show(p)

# Interactive visualizations (Daily stats))
output_notebook()


l_b_vol = power['b_volt_V'].iloc[28]
l_p_vol = power['p_volt_V'].iloc[28]
l_yield = power['y_rt'].iloc[28]

x=[l_b_vol, l_p_vol, l_yield]
col=["purple","orange","blue"]
y=["Battery Voltage (V)", "Panel Voltage (V)", "Energy Yield (kWh)"]

data=pd.DataFrame(x,y)
data=data.reset_index(drop=False)
data.columns=["col","data"]
source = ColumnDataSource(data)


p = figure(y_range=y)
p.title.text = "Today's Power Stats" 
p.title.align = "center" 

p.hbar(y=y, right=x, height=0.4, color=col)
p.xaxis.axis_label = 'Not to scale'
p.xgrid.visible = False
p.ygrid.visible = False
p.xaxis.visible = False

labels = LabelSet(x="data", y='col', text='data', level='glyph',
              x_offset=-20, y_offset=40, source=source, render_mode='canvas')

p.add_layout(labels)
output_file("Daily_power_stats.html", title="Daily power stats")
show(p)

